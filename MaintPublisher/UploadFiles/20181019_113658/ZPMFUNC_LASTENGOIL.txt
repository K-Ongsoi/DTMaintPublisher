FUNCTION ZPMFUNC_LASTENGOIL.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(END_DATE) TYPE  DATS
*"     VALUE(END_TIME) TYPE  TIMS
*"  TABLES
*"      RESULT STRUCTURE  ZTPM_ENGOIL
*"      DETAIL_TAB STRUCTURE  ZTPM_LASTENGDTL
*"----------------------------------------------------------------------
TYPES: BEGIN OF TY_TPLNR,
  TPLNR TYPE IFLOT-TPLNR.
TYPES END OF TY_TPLNR.
DATA: IT_RESULT TYPE TABLE OF ZTPM_ENGOIL.
DATA: TMP_RESULT TYPE TABLE OF ZTPM_ENGOIL.
DATA: AC_RESULT TYPE TABLE OF ZTPM_ENGOIL.
DATA: WA_DETAIL TYPE ZTPM_LASTENGDTL.
DATA: WA_OIL TYPE ZTPM_ENGOIL.
DATA: WA_FHFC TYPE IMRG.
DATA: WA_IMPT TYPE IMPT.
DATA: IT_TPLNR TYPE TABLE OF TY_TPLNR.
DATA: IT_TMPAC TYPE TABLE OF TY_TPLNR.
FIELD-SYMBOLS: <AS> TYPE TY_TPLNR.
DATA: E1 TYPE P DECIMALS 2.
DATA: E2 TYPE P DECIMALS 2.
DATA: E3 TYPE P DECIMALS 2.
DATA: E4 TYPE P DECIMALS 2.
DATA: FH1 TYPE P DECIMALS 2.
DATA: FH2 TYPE P DECIMALS 2.
DATA: FH3 TYPE P DECIMALS 2.
DATA: FH4 TYPE P DECIMALS 2.
DATA: U1 TYPE P DECIMALS 2.
DATA: U2 TYPE P DECIMALS 2.
DATA: U3 TYPE P DECIMALS 2.
DATA: U4 TYPE P DECIMALS 2.
DATA: TMP TYPE P DECIMALS 2.
DATA: IT_VALNUM TYPE TABLE OF BAPI1003_ALLOC_VALUES_NUM.
DATA: WA_VALNUM TYPE BAPI1003_ALLOC_VALUES_NUM.
DATA: IT_VALCHR TYPE TABLE OF BAPI1003_ALLOC_VALUES_CHAR.
DATA: IT_VALCUR TYPE TABLE OF BAPI1003_ALLOC_VALUES_CURR.
DATA: IT_RETTAB TYPE TABLE OF BAPIRET2.
DATA: OBJKEY TYPE BAPI1003_KEY-OBJECT.
DATA: TMPDT TYPE I.
DATA: STRDT TYPE C LENGTH 8.
DATA: OUTDT TYPE DATS.

FIELD-SYMBOLS: <FS> TYPE ZTPM_ENGOIL.
DATA: WA_REC TYPE ZTPM_ENGOIL.
DATA: X_MEAS(22).
DATA: TMP_TME TYPE Z_SCHED_T_LOCAL.
DATA: FIRST_POINT1 TYPE C VALUE ' '.
DATA: FIRST_POINT2 TYPE C VALUE ' '.
DATA: FIRST_POINT3 TYPE C VALUE ' '.
DATA: FIRST_POINT4 TYPE C VALUE ' '.
DATA: LAST_POINT1 TYPE C VALUE ' '.
DATA: LAST_POINT2 TYPE C VALUE ' '.
DATA: LAST_POINT3 TYPE C VALUE ' '.
DATA: LAST_POINT4 TYPE C VALUE ' '.

REFRESH RESULT.
REFRESH TMP_RESULT.
REFRESH IT_TPLNR.

SELECT TPLNR INTO CORRESPONDING FIELDS OF TABLE IT_TMPAC
  FROM IFLOT
 WHERE TPLNR LIKE 'HS-T__' OR TPLNR = 'HS-HRH' OR TPLNR = 'HS-CMV'.

LOOP AT IT_TMPAC ASSIGNING <AS>.
  OBJKEY = <AS>-TPLNR.
  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey              = OBJKEY
      objecttable            = 'IFLOT'
      classnum               = 'Z_FL_AIRCRAFT'
      classtype              = '003'
    tables
      allocvaluesnum         = it_valnum
      allocvalueschar        = it_valchr
      allocvaluescurr        = it_valcur
      return                 = it_rettab.
  IF sy-subrc EQ 0.
    READ TABLE IT_VALNUM INTO WA_VALNUM WITH KEY CHARACT = 'Z_DATE_PHASEOUT'.
    IF SY-SUBRC = 0.
      TMPDT = WA_VALNUM-VALUE_FROM.
      STRDT = TMPDT.
      OUTDT = STRDT.
      IF OUTDT LT SY-DATUM.
        CONTINUE.
        ENDIF.
    ENDIF.
  ENDIF.
  APPEND <AS> TO IT_TPLNR.
ENDLOOP.
SORT IT_TPLNR BY TPLNR ASCENDING.

LOOP AT IT_TPLNR ASSIGNING <AS>.
  REFRESH IT_RESULT.
  SELECT LOGID STXT AS DESCR MDOCM_OPTIME MDOCM_CYCLES STARTDT STARTTM ENDDT ENDTM
         ZZ_SCHEDDEPART_D ZZ_SCHEDDEPART_T
         ZZ_SCHED_D_LOCAL ZZ_SCHED_T_LOCAL
         OBJNR ZZ_AIRCRAFT AS ACREG ZZ_FLIGHT_NO AS FLTNO ZZ_FROM AS FROMSTTN ZZ_TO AS TOSTTN
         ZZ_OILREFILL_E1 AS ENG1_OIL ZZ_OILREFILL_E2 AS ENG2_OIL
         ZZ_OILREFILL_E3 AS ENG3_OIL ZZ_OILREFILL_E4 AS ENG4_OIL
         ZZ_OILREFILL_APU AS APU_OIL
    INTO CORRESPONDING FIELDS OF TABLE IT_RESULT UP TO 300 ROWS
    FROM DIACL_LOG_ENTRY
   WHERE ZZ_AIRCRAFT = <AS>-TPLNR AND LETYP <> 'ML'
         AND ( STARTDT <= END_DATE OR
           ZZ_SCHEDDEPART_D <= END_DATE OR
           ZZ_SCHED_D_LOCAL <= END_DATE )
    ORDER BY ZZ_SCHEDDEPART_D DESCENDING ZZ_SCHEDDEPART_T DESCENDING ZZ_SCHED_D_LOCAL DESCENDING ZZ_SCHED_T_LOCAL DESCENDING STARTDT DESCENDING STARTTM DESCENDING.
  IF sy-subrc = 0.
    LOOP AT IT_RESULT ASSIGNING <FS>.
        IF <FS>-MDOCM_OPTIME IS NOT INITIAL AND <FS>-MDOCM_OPTIME NE ''.
*   GET FLIGHT HOURS
          CLEAR: WA_FHFC, WA_IMPT.
          CALL FUNCTION 'MEASUREM_DOCUM_READ'
                EXPORTING
                  BUFFER_BYPASS = 'X'
                  MDOCM = <FS>-MDOCM_OPTIME
                IMPORTING
                  IMPT_WA = WA_IMPT
                  IMRG_WA = WA_FHFC.
          CALL FUNCTION 'FLTP_CHAR_CONVERSION_FROM_SI'
                EXPORTING
                  CHAR_UNIT = WA_FHFC-RECDU
                  UNIT_IS_OPTIONAL = ''
                  DECIMALS = WA_IMPT-DECIM
                  EXPONENT = 0
                  FLTP_VALUE_SI = WA_FHFC-CDIFF
                  INDICATOR_VALUE = 'X'
                  MASC_SYMBOL = '_'
                IMPORTING
                  CHAR_VALUE = X_MEAS.
          <FS>-FLTHRS = X_MEAS.
        ENDIF.
*   GET FLIGHT CYCLES
        IF <FS>-MDOCM_CYCLES IS NOT INITIAL AND <FS>-MDOCM_CYCLES NE ''.
          CLEAR: WA_FHFC, WA_IMPT.
          CALL FUNCTION 'MEASUREM_DOCUM_READ'
                EXPORTING
                  BUFFER_BYPASS = 'X'
                  MDOCM = <FS>-MDOCM_CYCLES
                IMPORTING
                  IMPT_WA = WA_IMPT
                  IMRG_WA = WA_FHFC.
          CALL FUNCTION 'FLTP_CHAR_CONVERSION_FROM_SI'
                EXPORTING
                  CHAR_UNIT = WA_FHFC-RECDU
                  UNIT_IS_OPTIONAL = ''
                  DECIMALS = WA_IMPT-DECIM
                  EXPONENT = 0
                  FLTP_VALUE_SI = WA_FHFC-CDIFF
                  INDICATOR_VALUE = 'X'
                  MASC_SYMBOL = '_'
                IMPORTING
                  CHAR_VALUE = X_MEAS.
          <FS>-FLTCYCLE = X_MEAS.
        ENDIF.
        IF <FS>-ZZ_SCHEDDEPART_T IS INITIAL OR <FS>-ZZ_SCHEDDEPART_T = ''.
          TMP_TME = <FS>-ZZ_SCHED_T_LOCAL - ( 7 * 3600 ) .
          IF TMP_TME > <FS>-ZZ_SCHED_T_LOCAL.
            <FS>-ZZ_SCHEDDEPART_D = <FS>-ZZ_SCHED_D_LOCAL - 1.
          ELSE.
            <FS>-ZZ_SCHEDDEPART_D = <FS>-ZZ_SCHED_D_LOCAL.
          ENDIF.
          <FS>-ZZ_SCHEDDEPART_T = TMP_TME.
        ENDIF.
        IF <FS>-ENG1_OIL = 0 AND <FS>-ENG2_OIL = 0 AND <FS>-ENG3_OIL = 0 AND <FS>-ENG4_OIL = 0.
           CLEAR WA_OIL.
           SELECT SINGLE LOGID STXT AS DESCR MDOCM_OPTIME MDOCM_CYCLES STARTDT STARTTM ENDDT ENDTM
                  ZZ_SCHEDDEPART_D ZZ_SCHEDDEPART_T
                  ZZ_SCHED_D_LOCAL ZZ_SCHED_T_LOCAL
                  OBJNR ZZ_AIRCRAFT AS ACREG ZZ_FLIGHT_NO AS FLTNO
                  ZZ_OILREFILL_E1 AS ENG1_OIL ZZ_OILREFILL_E2 AS ENG2_OIL
                  ZZ_OILREFILL_E3 AS ENG3_OIL ZZ_OILREFILL_E4 AS ENG4_OIL
                  ZZ_OILREFILL_APU AS APU_OIL
           FROM DIACL_LOG_ENTRY
           INTO CORRESPONDING FIELDS OF WA_OIL
           WHERE LETYP = 'ML' AND ZZ_AIRCRAFT = <FS>-ACREG AND ZZ_FLIGHT_NO = <FS>-FLTNO
           AND ZZ_SCHEDDEPART_D = <FS>-ZZ_SCHEDDEPART_D AND ZZ_FROM = <FS>-FROMSTTN AND ZZ_TO = <FS>-TOSTTN.
           IF SY-SUBRC = 0.
             <FS>-ENG1_OIL = WA_OIL-ENG1_OIL.
             <FS>-ENG2_OIL = WA_OIL-ENG2_OIL.
             <FS>-ENG3_OIL = WA_OIL-ENG3_OIL.
             <FS>-ENG4_OIL = WA_OIL-ENG4_OIL.
           ENDIF.
        ENDIF.
        APPEND <FS> TO TMP_RESULT.
    ENDLOOP.
  ELSE.
     CLEAR WA_REC.
  ENDIF.
 ENDLOOP.

LOOP AT IT_TPLNR ASSIGNING <AS>.
  E1 = E2 = E3 = E4 = 0.
  FH1 = FH2 = FH3 = FH4 = 0.
  U1 = U2 = U3 = U4 = 0.
  FIRST_POINT1 = ' '.
  FIRST_POINT2 = ' '.
  FIRST_POINT3 = ' '.
  FIRST_POINT4 = ' '.
  LAST_POINT1 = ' '.
  LAST_POINT2 = ' '.
  LAST_POINT3 = ' '.
  LAST_POINT4 = ' '.
  REFRESH AC_RESULT.
  LOOP AT TMP_RESULT INTO WA_REC WHERE ACREG = <AS>-TPLNR.
    MOVE-CORRESPONDING WA_REC TO WA_DETAIL.
    APPEND WA_DETAIL TO DETAIL_TAB.
    APPEND WA_REC TO AC_RESULT.
  ENDLOOP.
  SORT AC_RESULT BY ZZ_SCHEDDEPART_D DESCENDING ZZ_SCHEDDEPART_T DESCENDING STARTDT DESCENDING STARTTM DESCENDING.
  CLEAR WA_REC.
  LOOP AT AC_RESULT INTO WA_REC.
    IF FIRST_POINT1 EQ 'X' AND LAST_POINT1 EQ 'X' AND FIRST_POINT2 EQ 'X' AND LAST_POINT2 EQ 'X' AND
       FIRST_POINT3 EQ 'X' AND LAST_POINT3 EQ 'X' AND FIRST_POINT4 EQ 'X' AND LAST_POINT4 EQ 'X'.
      EXIT.
    ENDIF.
    IF FIRST_POINT1 NE 'X' OR LAST_POINT1 NE 'X'.
     IF WA_REC-ENG1_OIL > '0.0'.
       IF FIRST_POINT1 = ' '.
         FIRST_POINT1 = 'X'.
         FH1 = WA_REC-FLTHRS.
         E1 = WA_REC-ENG1_OIL.
       ELSE.
         IF FH1 > '0.0'.
           LAST_POINT1 = 'X'.
*           E1 = WA_REC-ENG1_OIL.
           U1 = E1 / FH1.
           FH1 = WA_REC-FLTHRS.
         ELSE.
           FH1 = FH1 + WA_REC-FLTHRS.
         ENDIF.
       ENDIF.
     ELSE.
       IF FIRST_POINT1 = 'X'.
         FH1 = FH1 + WA_REC-FLTHRS.
       ENDIF.
     ENDIF.
    ENDIF.

    IF FIRST_POINT2 NE 'X' OR LAST_POINT2 NE 'X'.
     IF WA_REC-ENG2_OIL > '0.0'.
       IF FIRST_POINT2 = ' '.
         FIRST_POINT2 = 'X'.
         FH2 = WA_REC-FLTHRS.
         E2 = WA_REC-ENG2_OIL.
       ELSE.
         IF FH2 > '0.0'.
           LAST_POINT2 = 'X'.
*           E2 = WA_REC-ENG2_OIL.
           U2 = E2 / FH2.
*           U2 = WA_REC-ENG2_OIL / FH2.
           FH2 = WA_REC-FLTHRS.
         ELSE.
           FH2 = FH2 + WA_REC-FLTHRS.
         ENDIF.
       ENDIF.
     ELSE.
       IF FIRST_POINT2 = 'X'.
         FH2 = FH2 + WA_REC-FLTHRS.
       ENDIF.
     ENDIF.
    ENDIF.

    IF FIRST_POINT3 NE 'X' OR LAST_POINT3 NE 'X'.
     IF WA_REC-ENG3_OIL > '0.0'.
       IF FIRST_POINT3 = ' '.
         FIRST_POINT3 = 'X'.
         FH3 = WA_REC-FLTHRS.
         E3 = WA_REC-ENG3_OIL.
       ELSE.
         IF FH3 > '0.0'.
           LAST_POINT3 = 'X'.
*           E3 = WA_REC-ENG3_OIL.
           U3 = E3 / FH3.
*           U3 = WA_REC-ENG3_OIL / FH3.
           FH3 = WA_REC-FLTHRS.
         ELSE.
           FH3 = FH3 + WA_REC-FLTHRS.
         ENDIF.
         LAST_POINT3 = 'X'.
       ENDIF.
     ELSE.
       IF FIRST_POINT3 = 'X'.
         FH3 = FH3 + WA_REC-FLTHRS.
       ENDIF.
     ENDIF.
    ENDIF.

    IF FIRST_POINT4 NE 'X' OR LAST_POINT4 NE 'X'.
     IF WA_REC-ENG4_OIL > '0.0'.
       IF FIRST_POINT4 = ' '.
         FIRST_POINT4 = 'X'.
         FH4 = WA_REC-FLTHRS.
         E4 = WA_REC-ENG4_OIL.
       ELSE.
         IF FH4 > '0.0'.
*           E4 = WA_REC-ENG4_OIL.
           U4 = E4 / FH4.
*           U4 = WA_REC-ENG4_OIL / FH4.
           FH4 = WA_REC-FLTHRS.
         ELSE.
           FH4 = FH4 + WA_REC-FLTHRS.
         ENDIF.
         LAST_POINT4 = 'X'.
       ENDIF.
     ELSE.
       IF FIRST_POINT4 = 'X'.
         FH4 = FH4 + WA_REC-FLTHRS.
       ENDIF.
     ENDIF.
    ENDIF.
  ENDLOOP.
  WA_REC-ENG1_OIL = E1.
  WA_REC-ENG2_OIL = E2.
  WA_REC-ENG3_OIL = E3.
  WA_REC-ENG4_OIL = E4.
  WA_REC-ENG1_FH = FH1.
  WA_REC-ENG2_FH = FH2.
  WA_REC-ENG3_FH = FH3.
  WA_REC-ENG4_FH = FH4.
  WA_REC-ENG1_UTL = U1.
  WA_REC-ENG2_UTL = U2.
  WA_REC-ENG3_UTL = U3.
  WA_REC-ENG4_UTL = U4.
  APPEND WA_REC TO RESULT.
 ENDLOOP.
 SORT RESULT BY ACREG ASCENDING.
 DELETE RESULT WHERE ACREG IS INITIAL OR ACREG = ''.
ENDFUNCTION.
